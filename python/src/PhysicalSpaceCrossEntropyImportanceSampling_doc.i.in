%feature("docstring") OT::PhysicalSpaceCrossEntropyImportanceSampling
"Physical Space Cross-Entropy Importance Sampling.

Parameters
----------
event : :class:`~openturns.RandomVector`
    Event we are computing the probability of.

activeParameters : :class:`~openturns.Point`
    Point composed of list of active parameters indexes for the auxiliary distribution.

initialAuxiliaryDistributionParameters : :class:`~openturns.Point`
    Initial value of active parameters of the auxiliary distribution.

bounds : :class:`~openturns.Interval`
    Bounds on the active parameters of the auxiliary distribution.

auxiliaryDistribution : :class:`~openturns.Distribution`
    Auxiliary distribution family for the Cross Entropy Importance Sampling algorithm.

rhoQuantile : float  :math:`0<\rho<1`
    Intermediate quantile level.
    
Notes
-----    

The following explanations are given for a failure event defined as :math:`g(\mathbf{X})<T` with :math:`\mathbf{X}` 
a random vector following a joint PDF :math:`f_\mathbf{X}`, :math:`T` a threshold and :math:`g` a limit state function,
without loss of generality.

The Importance Sampling (IS) probability estimate :math:`\widehat{P}^\text{IS}` is given by:

.. math::

    \widehat{P}^\text{IS}=\frac{1}{N} \sum_{i=1}^{N} {\mathbf{1}}_{g(\mathbf{x}_i)<T} \frac{h_0(\mathbf{x}_i)}{h(\mathbf{x}_i)},

with :math:`h` the auxiliary PDF of Importance Sampling, 
:math:`N`the number of independent samples generated with :math:`h` and :math:`{\mathbf{1}}_{g(\mathbf{x}_i)<T}` the 
indicator function of the failure domain. 

The optimal density minimizing the variance of the estimator :math:`h_{opt}` is defined as:

.. math::

    h_{opt}=\frac{{\mathbf{1}}_{g(x)<T}f_\mathbf{X}}{P},

with :math:`P` the failure probability which is inaccessible in practice since this probability is the quantity of interest
and unknown.

The Physical Space Cross-Entropy Importance Sampling algorithm [morio2015]_ uses a parametric auxiliary distribution :math:`h_\mathbf{\lambda}` in order to optimize its parameters to compute the probability of interest with accuracy. It involves an auxiliary optimization problem to find the auxiliary distribution parameters :math:`\mathbf{\lambda}` minimizing the Kullback-Leibler divergence with respect to :math:`h_{opt}`.

1. :math:`k=1` and set :math:`\rho \in [0,1]`

2. Generate the population :math:`\mathbf{x}_1^{(k)},...,\mathbf{x}_N^{(k)}` according to the PDF :math:`h_{k-1}`, apply the 
   function :math:`g` in order to have :math:`y_1^{(k)}=g(\mathbf{x}_1^{(k)}),...,y_N^{(k)} = g(\mathbf{x}_N^{(k)})`

3. Compute the empirical :math:`\rho`-quantile :math:`q_k=\max(T,y^{(k)}_{\left \lfloor \rho N \right\rfloor})`

4. Estimate the auxiliary distribution parameters:

   .. math::

       \mathbf{\lambda}_{j}= \frac{1}{N} \sum_{i=1}^{N}{\mathbf{1}}_{g(\mathbf{x}_i^{(j)}) \leq q_k} \frac{f_\mathbf{X}(\mathbf{x}_i^{(j)})}{h_{\mathbf{\lambda}_{j-1}}(\mathbf{x}_i^{(j)})} \log(h_{\mathbf{\lambda}_{j}}(\mathbf{x}_i^{(j)}))

6. If :math:`q_k>T`, :math:`k\leftarrow k+1`, go to Step 2

7. Estimate the probability :math:`\widehat{P}^{CE}(g(\mathbf{\mathbf{X}}<T))=\frac{1}{N}\displaystyle \sum_{i=1}^{N} \mathbf{1}_{g(\mathbf{x}_i^{(k)})<T} \frac{f_\mathbf{X}(\mathbf{x}_i^{(k)})}{h_{\mathbf{\lambda}_{j}(\mathbf{x}_i^{(k)})}}`.



Default solver for the optimization of auxiliary distribution is 'LD_LBFGS' from :class:`~openturns.NLopt`.

See also
--------
StandardSpaceCrossEntropyImportanceSampling, CrossEntropyImportanceSampling, CrossEntropyResult


Examples
--------
>>> import openturns as ot
>>> from openturns.testing import assert_almost_equal
>>> ot.RandomGenerator.SetSeed(0)
>>> distribution_R = ot.LogNormalMuSigma(300.0, 30.0, 0.0).getDistribution()
>>> distribution_F = ot.Normal(75e3, 5e3)
>>> marginals = [distribution_R, distribution_F]
>>> distribution = ot.ComposedDistribution(marginals)
>>> # create the model
>>> model = ot.SymbolicFunction(['R', 'F'], ['R-F/(pi_*100.0)'])   
>>> #create the event 
>>> vect = ot.RandomVector(distribution)
>>> G = ot.CompositeRandomVector(model, vect)
>>> event = ot.ThresholdEvent(G, ot.Less(), -50.0)
>>> distribution_margin1 = ot.LogNormalMuSigma().getDistribution()
>>> distribution_margin2 = ot.Normal()
>>> aux_marginals = [distribution_margin1, distribution_margin2]
>>> aux_distribution = ot.ComposedDistribution(aux_marginals)
>>> ## Definition of parameters to be optimized
>>> active_parameters = [0,1,2,3,4] # active parameters from the auxiliary distribution which will be optimized
>>> ### WARNING : native parameters of distribution have to be considered
>>> bounds = ot.Interval([3,0.09,0.,50e3,2e3], # bounds on the active parameters
>>>                      [7,0.5,0.5,100e3,10e3])
>>> initial_theta= [5.70,0.1,0.,75e3,5e3] # initial value of the active parameters
>>> my_IS_physical = ot.PhysicalSpaceCrossEntropyImportanceSampling(
>>>     event,active_parameters,initial_theta,bounds,aux_distribution,0.3)
>>> my_IS_physical.run()
>>> myResult = my_IS_physical.getResult()"

// ---------------------------------------------------------------------------

%feature("docstring") OT::PhysicalSpaceCrossEntropyImportanceSampling::setSolver
"Accessor to optimization algorithm used to update auxiliary distribution parameters.

Parameters
----------
algorithm : :class:`~openturns.OptimizationAlgorithm`"




// ---------------------------------------------------------------------------

%feature("docstring") OT::PhysicalSpaceCrossEntropyImportanceSampling::getSolver
"Accessor to optimization algorithm used to update auxiliary distribution parameters.

Returns
-------
algorithm : :class:`~openturns.OptimizationAlgorithm`"




